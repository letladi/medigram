name: CI/CD for Next.js

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [18.x] # Use a recent LTS version for Next.js

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build Next.js app
        run: pnpm build

      - name: Archive production-ready build files
        run: tar -czf nextjs-build.tar.gz .next public package.json pnpm-lock.yaml

      - name: Copy build to server
        uses: appleboy/scp-action@v0.1.4 # Use a valid version of the scp action
        with:
          host: ec2-54-197-61-157.compute-1.amazonaws.com
          username: ubuntu
          key: ${{ secrets.DEMO_KEY }}
          source: nextjs-build.tar.gz
          target: /tmp/

      - name: Deploy on server
        uses: appleboy/ssh-action@v0.1.6 # Use a valid version of the ssh action
        with:
          host: ec2-54-197-61-157.compute-1.amazonaws.com
          username: ubuntu
          key: ${{ secrets.DEMO_KEY }}
          script: |
            # Extract the build on the server
            tar -xzf /tmp/nextjs-build.tar.gz -C /var/www/demo

            # Move to the project directory and install production dependencies
            cd /var/www/demo
            pnpm install --frozen-lockfile --prod

            # Restart your application using pm2 (ensure pm2 is installed and configured)
            pm2 restart demo || pm2 start pnpm --name demo -- start
